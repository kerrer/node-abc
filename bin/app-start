#!/usr/bin/env node
var fs =  require('fs'),
    path = require('path'),
	S = require('string'),
	grunt = require('grunt'),
    watch = require('watch');
var program = require('commander');
var forever = require('forever');
var detect = require('detect-port');
var  ip = require('ip');

program
  .version('0.0.1')
  .option('-p, --port', 'Add port')
  .option('-h, --host', 'Add host')
  .option('-eh, --etcd_host', 'Add host')
  .option('-ep, --etcd_port', 'Add host')
  .option('-d, --deamon', 'Add bbq sauce')
  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')
  .parse(process.argv);

var port = normalizePort(program.port) ||  5004; 
var host = program.host || ip.address();
var etcd_host = program.etcd_host || '127.0.0.1';
var etcd_port = program.etcd_port || 4001;

process.env.port = port;
process.env.host = host;
process.env.etcd_host = etcd_host;
process.env.etcd_port = etcd_port;

fs.readFile('package.json', function (err, data) {
		if (err) throw err;
		var pkg= JSON.parse(data);		
		process.env.NODE_ENV === "development" && pkg.autobuild  ? watch_build() : start(pkg.name);
				
});

function watch_build(){
    var fork = require('child_process').fork, grunt_child;
	grunt_child = fork(__dirname+'/grunt.js');
	grunt_child.on('message',function(obj){
		if(obj.type && obj.type==='grunt'){
			if(obj.data && obj.data==="start"){
				start();
			}else if(obj.data && obj.data==="reload"){
				reload();
			}
		}
	});
	grunt_child.send({type:'main',data:'newbuild'});

	watch.watchTree('./src', function (f, curr, prev) {
		if (typeof f == "object" && prev === null && curr === null) {
			console.log("watching.........................");
		} else if (prev === null) {
			// f is a new file
			rebuild(f);
		} else if (curr.nlink === 0) {
			// f was removed
			rebuild(f);
		} else {
			// f was changed
			rebuild(f);
		}
	});	
}

function rebuild(file){
    if(S(file).startsWith("src/test")){
		  grunt_child.send({type:'test',data:'rebuild'});
	}else{
		  grunt_child.send({type:'main',data:'rebuild'});
	}
}

function start(name){	
	detect(port, function(error, _port) {
				if (port === _port) {
					console.log("使用注册中心:",etcd_host,etcd_port);
					   process.env.project = name;
		              //forever.startDaemon(__dirname+'/services.js');
		              var Service= require('services')(etcd_host,etcd_port).server(port,host);
                      Service.start(name);
				}else{
					console.log(error);
					console.log('port: %d was occupied, try port: %d', port, _port);
					//reject(false);
				}
	});

}

function stop(){
   setTimeout(function() {
     Service.stop();	
   }, 3000);      
}

function reload(){
  Service.reload();		
}

function restart(){
   console.log("restart services................");
   setTimeout(function() {
      Service.restart();	
   }, 1000);     
}

function exit(n){
	 setTimeout(function(){
        process.exit();
     }, n);
}

function normalizePort(val) {
	  var port = parseInt(val, 10);
	  if (isNaN(port)) {
	    // named pipe
	    //return val;
	    return false;
	  }

	  if (port >= 0) {
	    // port number
	    return port;
	  }
	  return false;
}

process.on('uncaughtException', function(err) {
  console.log('Caught exception: ' + err);
});
process.on('exit', function(code) {
  // do *NOT* do this
  setTimeout(function() {
    console.log('This will not run');
  }, 0);
  console.log('app start About to exit with code:', code);
});
var unhandledRejections = new Map();
process.on('unhandledRejection', function(reason, p) {
	console.log("unhandledRejection");
  unhandledRejections.set(p, reason);
});
process.on('rejectionHandled', function(p) {
	console.log("rejectionHandled");
  unhandledRejections.delete(p);
});
