#!/usr/bin/env node
/*
 * NODE_ENV=production
 * node bin/app -p 5555 -d
 * forever start -a -d bin/app -p 5555 | forever stop bin/app
 * pm2 start bin/app -- -p 5555 | pm2 stop app | pm2 delete app
 */
 
var fs =  require('fs'),
    path = require('path'),
	S = require('string'),
	_ = require('lodash'),
	program = require('commander'),	
	detect = require('detect-port'),
	ip = require('ip');
var env = process.env.NODE_ENV = process.env.NODE_ENV || "development";
var run = process.env._.substr(process.env._.lastIndexOf('/')+1);	

var Service;

process.env.CONF_DIR= path.resolve(env === "production" ?  __dirname + "/../services" : __dirname + "/../target/services" );
process.env.SVR_DIR = path.resolve(env === "production" ?  __dirname + "/../services" : __dirname + "/../target/services" );

program
	.version('0.0.1');

if(run === 'node' || run === 'app'){
	 var cmdValue;
	 program
		.arguments('<cmd> [otherOpts...]')
		.action(function (cmd, otherOpts) {
			cmdValue = cmd;
		});
		
	program
		.command('start')
		.description('启动服务')
		.option('-p, --port [port]', '服务运行端口','5004')
		.option('-h, --host [host]', '服务绑定的ip地址',ip.address())
		.option('-H, --etcd_host [etcd_host]', '注册中心ip地址','127.0.0.1')
		.option('-P, --etcd_port [etcd_port]', '注册中心连接端口','4001')
		.option('-t, --threads [threads]', '运行的线程数',1)
		.option('-T, --enableThreads', '强制开启多线程',false)
		.option('-d, --deamon', '开始deamon运行',false)
		.option('-w, --watch', '自动构建源码',false)
		.option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')
		.action(function(options){
			cmdValue="start";
			console.log('服务启动中....................');
			start(options);
		});
   
	program
		.command('stop')
		.description('停止服务')
		.action(function(){		
			cmdValue="stop";
			shutdown();
		});

	program.on('--help', function(){
		console.log('  Examples:');
		console.log('');
		console.log('    $ bin/app --help');
		console.log('    $ bin/app -h');
		console.log('');
	});
	
	program.parse(process.argv);

	if (typeof cmdValue === 'undefined') {
		program.help();
		process.exit(1);
	}
	if (_.indexOf(['start','stop'], cmdValue)===-1) {
		console.log(cmdValue,':没有此命令或该命令无法识别，请使用‘bin/app --help’获取帮助');
		process.exit(1);
	}

}else{
	program
		.option('-p, --port [port]', '服务运行端口','5004')
		.option('-h, --host [host]', '服务绑定的ip地址',ip.address())
		.option('-H, --etcd_host [etcd_host]', '注册中心ip地址','127.0.0.1')
		.option('-P, --etcd_port [etcd_port]', '注册中心连接端口','4001')
		.option('-t, --threads [threads]', '运行的线程数',1)
		.option('-T, --enableThreads', '强制开启多线程',false)
		.parse(process.argv);
	
	start(program);	
}

function start(options){
	var opts ={};	
	opts.port = options.port;
	opts.host =options.host;
	opts.etcd_host=options.etcd_host;
	opts.etcd_port=options.etcd_port;
	opts.instances = env === "production" || options.enableThreads ? options.threads : 1;
	
	var pkg= JSON.parse(fs.readFileSync('package.json'));
	opts.name = pkg.name;
	
	var is_watch= env === "production" ? false : options.watch;

    detect(opts.port).then(function(_port) {
		if (opts.port !== _port) {
			console.log('服务端口:%d已被占用, 可以试用端口: %d', opts.port, _port);
			return;
		}
		console.log("使用注册中心:",opts.etcd_host,opts.etcd_port);		
		switch (run){
			case 'pm2':
				opts.instances = 1;
			case 'forever':
				node(opts)
				break;
			case 'node':
			case 'app':
				options.deamon ? forever('start',opts) : node(opts,true,is_watch);
				break;			
			default:
				break;
		}//switch	
	});//promisePort
}

function shutdown(){
	console.log('服务停止中....................');
	forever('stop');
	console.log('服务已停止！');
}

function reload(){
	if(Service){
		Service.reload();
	}		
}

function restart(){
   console.log("restart services................");
   setTimeout(function() {
      Service.restart();	
   }, 1000);     
}

function exit(n){
	 setTimeout(function(){
        process.exit();
     }, n);
}

function normalizePort(val) {
	  var port = parseInt(val, 10);
	  if (isNaN(port)) {
	    // named pipe
	    //return val;
	    return false;
	  }

	  if (port >= 0) {
	    // port number
	    return port;
	  }
	  return false;
}

function node(options,is_cli,is_watch){	
	Service = require('services')(options.etcd_port,options.etcd_host);
	Service
		.config({instances:options.instances})
		.server(options.port,options.host)
		.start(options.name)
		.then(function(){				
			is_watch ? watch() :null;
			is_cli ? cli(options.name) : null;
		},function(){
			
		});								
}

function cli(prompt){
	process.on('uncaughtException', function(err) {
		console.log('Caught exception: ' + err.message,err.stack);
	});
	
	process.on('exit', function(code) {
		// do *NOT* do this
		setTimeout(function() {
			console.log('This will not run');
		}, 0);
		console.log('app start About to exit with code:', code);
	});
	
	var unhandledRejections = new Map();
	process.on('unhandledRejection', function(reason, p) {
		console.log("unhandledRejection");
		unhandledRejections.set(p, reason);
	});
	
	process.on('rejectionHandled', function(p) {
		console.log("rejectionHandled");
		unhandledRejections.delete(p);
	});
	
	process.on("SIGINT", function () {
		process.exit();
	});
	
	var tip="输入命令";
	var readline = require('readline'),
    rl = readline.createInterface(process.stdin, process.stdout);
	rl.setPrompt(prompt + '> ');
	rl.prompt();
	rl.on('line', function(line) {
		switch(line.trim()) {
			case 'reload':
				
				break;
			case 'restart':
				
				break;
			case 'shutdown':
				process.emit("SIGINT");
				break;
			case '':
				console.log('请输入help来获取帮助');
				break;
			case 'help':
				
				break;
			default:
				console.log('无法识别 `' + line.trim() + '`, 请输入help来获取帮助');
				break;
		}
		rl.prompt();
	}).on('close', function() {
		process.emit("SIGINT");
	});	
}

function forever(action,options){
	var forever = require('forever');
	forever.load({root:path.join(process.env.PWD,'.forever'),debug:false});
	if(action === 'stop'){
		forever.stop();
	}else if(action === 'start'){
		var compiled=_.template("require('services')(<%= etcd_port %>,'<%= etcd_host %>').config({instances:<%= instances %>}).server(<%= port %>,'<%= host %>').start('<%= name %>');");
		var deamon_content = compiled(options);
		var deamon_file=path.join(__dirname,'..','.forever' , options.name +'.js');
		fs.writeFile(deamon_file, deamon_content,'utf8', function (err) {
			if (err) {
				console.log("file error");
				throw err;
			}
			forever.startDaemon(deamon_file,{
				max: 3,
				silent: true
			});
		});	
	}	
}

function watch(){
	var fork = require('child_process').fork;
	var grunt = require('grunt');
    var watch = require('watch');
	var grunt_child = fork(__dirname+'/grunt.js');
	var rebuild = function(file){
		if(S(file).startsWith("src/test")){
			grunt_child.send({type:'test',data:'rebuild'});
		}else{
			grunt_child.send({type:'main',data:'rebuild'});
		}
	};
	 
	grunt_child.on('message',function(obj){
		if(obj.type && obj.type==='grunt'){
			if(obj.data && obj.data==="reload"){
				reload();
			}
		}
	});
	
	//grunt_child.send({type:'main',data:'newbuild'});
	watch.watchTree('./src', function (f, curr, prev) {
		if (typeof f == "object" && prev === null && curr === null) {
			console.log("watching.........................");
		} else if (prev === null) {
			// f is a new file
			rebuild(f);
		} else if (curr.nlink === 0) {
			// f was removed
			rebuild(f);
		} else {
			// f was changed
			rebuild(f);
		}
	});	
}


